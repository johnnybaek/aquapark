using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Windows.Forms;
using AquaparkApp.Controls;
using AquaparkApp.DAL;
using AquaparkApp.Models;

namespace AquaparkApp.Forms
{
    public partial class InteractiveMapForm : Form
    {
        private Panel _mainPanel;
        private Panel _headerPanel;
        private Panel _mapPanel;
        private Panel _infoPanel;
        private Label _titleLabel;
        private Label _zoneInfoLabel;
        private ZoneRepository _zoneRepository;
        private EmployeeRepository _employeeRepository;
        private List<Zone> _zones;
        private List<Employee> _employees;
        private Zone _selectedZone;
        private Dictionary<Zone, Rectangle> _zoneRectangles;
        private Dictionary<Zone, Color> _zoneColors;

        public InteractiveMapForm()
        {
            InitializeComponent();
            InitializeRepositories();
            SetupUI();
            LoadData();
            DrawMap();
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã
            this.Text = "üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–∫–≤–∞–ø–∞—Ä–∫–∞";
            this.Size = new Size(1400, 900);
            this.StartPosition = FormStartPosition.CenterParent;
            this.BackColor = Color.FromArgb(248, 248, 248);
            this.Font = new Font("SF Pro Display", 12F, FontStyle.Regular);
            this.FormBorderStyle = FormBorderStyle.Sizable;
            this.MinimumSize = new Size(1200, 800);
            
            this.ResumeLayout(false);
        }

        private void InitializeRepositories()
        {
            _zoneRepository = new ZoneRepository();
            _employeeRepository = new EmployeeRepository();
        }

        private void SetupUI()
        {
            // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
            _mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };

            // –ü–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            CreateHeaderPanel();

            // –ü–∞–Ω–µ–ª—å –∫–∞—Ä—Ç—ã
            CreateMapPanel();

            // –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            CreateInfoPanel();

            _mainPanel.Controls.AddRange(new Control[] { _headerPanel, _mapPanel, _infoPanel });
            this.Controls.Add(_mainPanel);
        }

        private void CreateHeaderPanel()
        {
            _headerPanel = new Panel
            {
                Dock = DockStyle.Top,
                Height = 80,
                BackColor = Color.FromArgb(0, 122, 255)
            };

            _titleLabel = new Label
            {
                Text = "üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ –∞–∫–≤–∞–ø–∞—Ä–∫–∞ \"–í–æ–¥–Ω—ã–π –º–∏—Ä\"",
                Font = new Font("SF Pro Display", 20F, FontStyle.Bold),
                ForeColor = Color.White,
                Location = new Point(30, 20),
                AutoSize = true
            };

            var legendLabel = new Label
            {
                Text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–æ–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.White,
                Location = new Point(30, 50),
                AutoSize = true
            };

            _headerPanel.Controls.AddRange(new Control[] { _titleLabel, legendLabel });
        }

        private void CreateMapPanel()
        {
            _mapPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(240, 248, 255),
                Padding = new Padding(20)
            };

            _mapPanel.Paint += MapPanel_Paint;
            _mapPanel.MouseClick += MapPanel_MouseClick;
            _mapPanel.MouseMove += MapPanel_MouseMove;
        }

        private void CreateInfoPanel()
        {
            _infoPanel = new Panel
            {
                Dock = DockStyle.Right,
                Width = 300,
                BackColor = Color.FromArgb(250, 250, 250),
                Padding = new Padding(15)
            };

            _zoneInfoLabel = new Label
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –Ω–∞ –∫–∞—Ä—Ç–µ",
                Font = new Font("SF Pro Display", 14F, FontStyle.Bold),
                ForeColor = Color.FromArgb(51, 51, 51),
                Location = new Point(15, 15),
                Size = new Size(270, 100),
                AutoSize = true
            };

            _infoPanel.Controls.Add(_zoneInfoLabel);
        }

        private async void LoadData()
        {
            try
            {
                _zones = (await _zoneRepository.GetAllAsync()).ToList();
                _employees = (await _employeeRepository.GetAllAsync()).ToList();
                
                InitializeZoneRectangles();
                InitializeZoneColors();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void InitializeZoneRectangles()
        {
            _zoneRectangles = new Dictionary<Zone, Rectangle>();
            
            // –†–∞–∑–º–µ—â–∞–µ–º –∑–æ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≤ –≤–∏–¥–µ —Å—Ö–µ–º—ã –∞–∫–≤–∞–ø–∞—Ä–∫–∞
            var zonePositions = new Dictionary<string, Rectangle>
            {
                // –í—Ö–æ–¥–Ω–∞—è –∑–æ–Ω–∞
                { "–ö–∞—Å—Å–∞", new Rectangle(50, 50, 120, 80) },
                { "–†–∞–∑–¥–µ–≤–∞–ª–∫–∏", new Rectangle(200, 50, 150, 100) },
                
                // –ë–∞—Å—Å–µ–π–Ω—ã
                { "–î–µ—Ç—Å–∫–∏–π –±–∞—Å—Å–µ–π–Ω", new Rectangle(50, 200, 150, 100) },
                { "–í–∑—Ä–æ—Å–ª—ã–π –±–∞—Å—Å–µ–π–Ω", new Rectangle(250, 200, 200, 120) },
                { "–í–æ–ª–Ω–æ–≤–æ–π –±–∞—Å—Å–µ–π–Ω", new Rectangle(500, 200, 180, 100) },
                { "–õ–µ–Ω–∏–≤–∞—è —Ä–µ–∫–∞", new Rectangle(720, 200, 200, 80) },
                
                // –ì–æ—Ä–∫–∏
                { "–ì–æ—Ä–∫–∞ \"–í–æ–¥–æ–ø–∞–¥\"", new Rectangle(50, 350, 120, 150) },
                { "–ì–æ—Ä–∫–∞ \"–†–∞–¥—É–≥–∞\"", new Rectangle(200, 350, 120, 120) },
                { "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤–æ—Ä–æ–Ω–∫–∞", new Rectangle(350, 350, 120, 100) },
                
                // –°–ü–ê –∑–æ–Ω–∞
                { "–î–∂–∞–∫—É–∑–∏", new Rectangle(500, 350, 100, 80) },
                { "–°–∞—É–Ω–∞", new Rectangle(650, 350, 100, 80) },
                { "–ë–∞–Ω—è", new Rectangle(800, 350, 100, 80) },
                
                // –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
                { "–î–µ—Ç—Å–∫–∞—è –ø–ª–æ—â–∞–¥–∫–∞", new Rectangle(50, 550, 150, 100) },
                { "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∑–æ–Ω–∞", new Rectangle(250, 550, 150, 100) },
                { "–ó–æ–Ω–∞ –æ—Ç–¥—ã—Ö–∞", new Rectangle(450, 550, 200, 100) },
                
                // –ü–∏—Ç–∞–Ω–∏–µ
                { "–ö–∞—Ñ–µ \"–í–æ–ª–Ω–∞\"", new Rectangle(700, 550, 150, 80) },
                { "–ë–∞—Ä \"–ê–∫–≤–∞\"", new Rectangle(900, 550, 100, 80) },
                
                // –°–ª—É–∂–µ–±–Ω—ã–µ –∑–æ–Ω—ã
                { "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è", new Rectangle(50, 700, 120, 60) },
                { "–ú–µ–¥–ø—É–Ω–∫—Ç", new Rectangle(200, 700, 100, 60) },
                { "–ü—Ä–æ–∫–∞—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è", new Rectangle(350, 700, 150, 60) },
                
                // –¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã
                { "–•—Ä–∞–º –ü–æ—Å–µ–π–¥–æ–Ω–∞", new Rectangle(550, 700, 120, 60) },
                { "–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –≥—Ä–æ—Ç", new Rectangle(700, 700, 120, 60) },
                { "–î–µ—Ç—Å–∫–∏–π –ª–∞–±–∏—Ä–∏–Ω—Ç", new Rectangle(850, 700, 120, 60) },
                { "VIP –∑–æ–Ω–∞", new Rectangle(1000, 700, 100, 60) }
            };

            foreach (var zone in _zones)
            {
                if (zonePositions.ContainsKey(zone.ZoneName))
                {
                    _zoneRectangles[zone] = zonePositions[zone.ZoneName];
                }
                else
                {
                    // –†–∞–∑–º–µ—â–∞–µ–º –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
                    var random = new Random(zone.ZoneId);
                    _zoneRectangles[zone] = new Rectangle(
                        random.Next(50, 800), random.Next(50, 600), 100, 60);
                }
            }
        }

        private void InitializeZoneColors()
        {
            _zoneColors = new Dictionary<Zone, Color>();
            var colors = new[]
            {
                Color.FromArgb(0, 122, 255),    // –°–∏–Ω–∏–π - –±–∞—Å—Å–µ–π–Ω—ã
                Color.FromArgb(255, 149, 0),    // –û—Ä–∞–Ω–∂–µ–≤—ã–π - –≥–æ—Ä–∫–∏
                Color.FromArgb(255, 45, 85),    // –ö—Ä–∞—Å–Ω—ã–π - –°–ü–ê
                Color.FromArgb(52, 199, 89),    // –ó–µ–ª–µ–Ω—ã–π - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
                Color.FromArgb(255, 204, 0),    // –ñ–µ–ª—Ç—ã–π - –ø–∏—Ç–∞–Ω–∏–µ
                Color.FromArgb(175, 82, 222),   // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π - —Å–ª—É–∂–µ–±–Ω—ã–µ
                Color.FromArgb(255, 159, 10),   // –ó–æ–ª–æ—Ç–æ–π - VIP
                Color.FromArgb(90, 200, 250)    // –ì–æ–ª—É–±–æ–π - —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
            };

            var colorIndex = 0;
            foreach (var zone in _zones)
            {
                _zoneColors[zone] = colors[colorIndex % colors.Length];
                colorIndex++;
            }
        }

        private void DrawMap()
        {
            _mapPanel.Invalidate();
        }

        private void MapPanel_Paint(object sender, PaintEventArgs e)
        {
            var g = e.Graphics;
            g.SmoothingMode = SmoothingMode.AntiAlias;

            // –†–∏—Å—É–µ–º —Ñ–æ–Ω –∫–∞—Ä—Ç—ã
            using (var brush = new LinearGradientBrush(
                _mapPanel.ClientRectangle,
                Color.FromArgb(240, 248, 255),
                Color.FromArgb(220, 235, 255),
                LinearGradientMode.Vertical))
            {
                g.FillRectangle(brush, _mapPanel.ClientRectangle);
            }

            // –†–∏—Å—É–µ–º –∑–æ–Ω—ã
            foreach (var kvp in _zoneRectangles)
            {
                var zone = kvp.Key;
                var rect = kvp.Value;
                var color = _zoneColors[zone];

                // –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∑–æ–Ω—ã
                using (var brush = new SolidBrush(Color.FromArgb(200, color)))
                {
                    g.FillRectangle(brush, rect);
                }

                // –ì—Ä–∞–Ω–∏—Ü–∞ –∑–æ–Ω—ã
                using (var pen = new Pen(color, 2))
                {
                    g.DrawRectangle(pen, rect);
                }

                // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
                var font = new Font("SF Pro Display", 9F, FontStyle.Bold);
                var textRect = new Rectangle(rect.X + 5, rect.Y + 5, rect.Width - 10, rect.Height - 10);
                
                using (var textBrush = new SolidBrush(Color.FromArgb(51, 51, 51)))
                {
                    g.DrawString(zone.ZoneName, font, textBrush, textRect, 
                        new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
                }

                // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–æ–Ω—É
                if (_selectedZone == zone)
                {
                    using (var pen = new Pen(Color.FromArgb(255, 45, 85), 4))
                    {
                        g.DrawRectangle(pen, rect);
                    }
                }
            }

            // –†–∏—Å—É–µ–º –ª–µ–≥–µ–Ω–¥—É
            DrawLegend(g);
        }

        private void DrawLegend(Graphics g)
        {
            var legendRect = new Rectangle(20, 20, 200, 200);
            
            // –§–æ–Ω –ª–µ–≥–µ–Ω–¥—ã
            using (var brush = new SolidBrush(Color.FromArgb(240, 240, 240)))
            {
                g.FillRectangle(brush, legendRect);
            }
            
            using (var pen = new Pen(Color.FromArgb(200, 200, 200), 1))
            {
                g.DrawRectangle(pen, legendRect);
            }

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ª–µ–≥–µ–Ω–¥—ã
            var titleFont = new Font("SF Pro Display", 12F, FontStyle.Bold);
            g.DrawString("–õ–µ–≥–µ–Ω–¥–∞", titleFont, Brushes.Black, legendRect.X + 10, legendRect.Y + 10);

            // –≠–ª–µ–º–µ–Ω—Ç—ã –ª–µ–≥–µ–Ω–¥—ã
            var legendItems = new[]
            {
                ("–ë–∞—Å—Å–µ–π–Ω—ã", Color.FromArgb(0, 122, 255)),
                ("–ì–æ—Ä–∫–∏", Color.FromArgb(255, 149, 0)),
                ("–°–ü–ê –∑–æ–Ω–∞", Color.FromArgb(255, 45, 85)),
                ("–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", Color.FromArgb(52, 199, 89)),
                ("–ü–∏—Ç–∞–Ω–∏–µ", Color.FromArgb(255, 204, 0)),
                ("–°–ª—É–∂–µ–±–Ω—ã–µ", Color.FromArgb(175, 82, 222))
            };

            var itemFont = new Font("SF Pro Display", 9F, FontStyle.Regular);
            int y = 40;
            
            foreach (var (name, color) in legendItems)
            {
                // –¶–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç
                using (var brush = new SolidBrush(color))
                {
                    g.FillRectangle(brush, legendRect.X + 15, legendRect.Y + y, 12, 12);
                }
                
                // –ù–∞–∑–≤–∞–Ω–∏–µ
                g.DrawString(name, itemFont, Brushes.Black, legendRect.X + 35, legendRect.Y + y);
                y += 20;
            }
        }

        private void MapPanel_MouseClick(object sender, MouseEventArgs e)
        {
            foreach (var kvp in _zoneRectangles)
            {
                if (kvp.Value.Contains(e.Location))
                {
                    _selectedZone = kvp.Key;
                    UpdateZoneInfo();
                    _mapPanel.Invalidate();
                    break;
                }
            }
        }

        private void MapPanel_MouseMove(object sender, MouseEventArgs e)
        {
            bool found = false;
            foreach (var kvp in _zoneRectangles)
            {
                if (kvp.Value.Contains(e.Location))
                {
                    _mapPanel.Cursor = Cursors.Hand;
                    found = true;
                    break;
                }
            }
            
            if (!found)
            {
                _mapPanel.Cursor = Cursors.Default;
            }
        }

        private void UpdateZoneInfo()
        {
            if (_selectedZone == null)
            {
                _zoneInfoLabel.Text = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–æ–Ω—É –Ω–∞ –∫–∞—Ä—Ç–µ";
                return;
            }

            var employeesInZone = _employees.Where(e => e.ZoneId == _selectedZone.ZoneId).ToList();
            
            var info = $"üèä {_selectedZone.ZoneName}\n\n" +
                      $"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{_selectedZone.Description ?? "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}\n\n" +
                      $"üë• –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {_selectedZone.Capacity} —á–µ–ª.\n\n" +
                      $"üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({employeesInZone.Count}):\n";

            foreach (var employee in employeesInZone.Take(5))
            {
                info += $"‚Ä¢ {employee.FullName} - {employee.Position}\n";
            }

            if (employeesInZone.Count > 5)
            {
                info += $"‚Ä¢ ... –∏ –µ—â–µ {employeesInZone.Count - 5} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n";
            }

            _zoneInfoLabel.Text = info;
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            
            // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            using (var brush = new LinearGradientBrush(
                this.ClientRectangle,
                Color.FromArgb(248, 248, 248),
                Color.FromArgb(235, 235, 235),
                LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(brush, this.ClientRectangle);
            }
        }
    }
}
