using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Reflection;
using System.Linq;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Windows.Forms;
using AquaparkApp.Controls;
using AquaparkApp.Models;
using AquaparkApp.BLL;
using AquaparkApp.DAL;

namespace AquaparkApp.Forms
{
    public partial class MainForm : Form
    {
        // –°–µ—Ä–≤–∏—Å—ã
        private TicketService _ticketService;
        private PaymentService _paymentService;

        public MainForm()
        {
            InitializeComponent();
            InitializeServices();
            SetupUI();
        }

        private System.Data.DataTable ToDataTable<T>(IEnumerable<T> items)
        {
            var dataTable = new System.Data.DataTable();
            var props = typeof(T).GetProperties(BindingFlags.Public | BindingFlags.Instance)
                .Where(p => p.PropertyType.IsValueType || p.PropertyType == typeof(string) || Nullable.GetUnderlyingType(p.PropertyType) != null)
                .ToList();

            foreach (var prop in props)
            {
                var columnType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                dataTable.Columns.Add(prop.Name, columnType);
            }

            foreach (var item in items)
            {
                var values = props.Select(p => p.GetValue(item, null) ?? DBNull.Value).ToArray();
                dataTable.Rows.Add(values);
            }

            return dataTable;
        }

        private void InitializeServices()
        {
            _ticketService = new TicketService();
            _paymentService = new PaymentService();
        }


        private void SetupUI()
        {
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            SetupHeaderPanel();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
            SetupSidebarPanel();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            SetupContentPanel();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤
            SetupAttractionsPanel();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
            SetupMainTabs();
        }

        private void SetupHeaderPanel()
        {
            // –õ–æ–≥–æ—Ç–∏–ø
            var logoLabel = new Label
            {
                Text = "üåä –ê–∫–≤–∞–ø–∞—Ä–∫ \"–í–æ–¥–Ω—ã–π –º–∏—Ä\"",
                Font = new Font("SF Pro Text", 20F, FontStyle.Bold),
                ForeColor = Color.White,
                Location = new Point(30, 20),
                AutoSize = true
            };

            _headerPanel.Controls.Add(logoLabel);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            _loginButton.Click += LoginButton_Click;
            _registerButton.Click += RegisterButton_Click;
            _logoutButton.Click += LogoutButton_Click;
        }

        private void SetupSidebarPanel()
        {
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–µ–Ω—é
            var scrollPanel = new Panel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                Padding = new Padding(5),
                BackColor = Color.FromArgb(240, 240, 240)
            };

            // –ú–µ–Ω—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü–∞–º –ë–î
            var menuItems = new[]
            {
                new { Text = "üè† –ì–ª–∞–≤–Ω–∞—è", Tag = "home" },
                new { Text = "üë• –ö–ª–∏–µ–Ω—Ç—ã", Tag = "clients" },
                new { Text = "üé´ –ë–∏–ª–µ—Ç—ã", Tag = "tickets" },
                new { Text = "üõçÔ∏è –£—Å–ª—É–≥–∏", Tag = "services" },
                new { Text = "üèä –ó–æ–Ω—ã", Tag = "zones" },
                new { Text = "üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", Tag = "employees" },
                new { Text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", Tag = "schedule" },
                new { Text = "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", Tag = "inventory" },
                new { Text = "üèÉ –ê—Ä–µ–Ω–¥–∞", Tag = "rentals" },
                new { Text = "üö™ –ü–æ—Å–µ—â–µ–Ω–∏—è", Tag = "visits" },
                new { Text = "üí≥ –û–ø–ª–∞—Ç—ã", Tag = "payments" },
                new { Text = "üìä –û—Ç—á–µ—Ç—ã", Tag = "reports" },
                new { Text = "üé¨ –í–∏–¥–µ–æ", Tag = "video" },
                new { Text = "üó∫Ô∏è –ö–∞—Ä—Ç–∞", Tag = "map" },
                new { Text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", Tag = "settings" },
                new { Text = "üë§ –ü—Ä–æ—Ñ–∏–ª—å", Tag = "profile" },
                new { Text = "üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", Tag = "admin" }
            };

            int y = 10;
            foreach (var item in menuItems)
            {
                var menuButton = new MacOSButton
                {
                    Text = item.Text,
                    Size = new Size(220, 35),
                    Location = new Point(10, y),
                    Font = new Font("SF Pro Text", 10F, FontStyle.Regular),
                    Tag = item.Tag,
                    AutoSize = true,
                    AutoSizeMode = AutoSizeMode.GrowAndShrink,
                    Anchor = AnchorStyles.Top | AnchorStyles.Left
                };
                menuButton.Click += MenuButton_Click;
                scrollPanel.Controls.Add(menuButton);
                y += 40;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            scrollPanel.Resize += (s, e) => UpdateSidebarButtonsLayout(scrollPanel);
            UpdateSidebarButtonsLayout(scrollPanel);

            _sidebarPanel.Controls.Add(scrollPanel);
        }

        private void UpdateSidebarButtonsLayout(Panel container)
        {
            int leftPadding = 10;
            int rightPadding = 10;
            int verticalSpacing = 5;
            int y = 10;
            int maxWidth = Math.Max(120, container.ClientSize.Width - leftPadding - rightPadding);

            foreach (Control ctrl in container.Controls)
            {
                if (ctrl is MacOSButton btn)
                {
                    // –®–∏—Ä–∏–Ω–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø–∞—Å–æ–º, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π
                    var textSize = TextRenderer.MeasureText(btn.Text, btn.Font);
                    int desiredWidth = Math.Min(maxWidth, textSize.Width + 24);
                    btn.Left = leftPadding;
                    btn.Top = y;
                    btn.Width = desiredWidth;
                    y += btn.Height + verticalSpacing;
                }
            }
        }

        private void SetupContentPanel()
        {
            // –ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Designer
        }

        private void SetupAttractionsPanel()
        {
            // –ü–∞–Ω–µ–ª—å –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –≤ Designer
        }

        private void SetupMainTabs()
        {
            // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–æ–∫
            _mainTabControl.DrawItem += TabControl_DrawItem;

            // –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
            var homeTab = new TabPage("üè† –ì–ª–∞–≤–Ω–∞—è");
            var attractionsTab = new TabPage("üé¢ –ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã");
            var ticketsTab = new TabPage("üé´ –ë–∏–ª–µ—Ç—ã");
            var reportsTab = new TabPage("üìä –û—Ç—á–µ—Ç—ã");
            var settingsTab = new TabPage("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏");

            _mainTabControl.TabPages.AddRange(new TabPage[] { homeTab, attractionsTab, ticketsTab, reportsTab, settingsTab });
        }

        private void TabControl_DrawItem(object sender, DrawItemEventArgs e)
        {
            var tabControl = sender as TabControl;
            var tabPage = tabControl.TabPages[e.Index];
            var tabRect = tabControl.GetTabRect(e.Index);

            // –†–∏—Å—É–µ–º —Ñ–æ–Ω –≤–∫–ª–∞–¥–∫–∏
            using (var brush = new LinearGradientBrush(tabRect, 
                Color.FromArgb(240, 240, 240), 
                Color.FromArgb(220, 220, 220), 
                LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(brush, tabRect);
            }

            // –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É
            using (var pen = new Pen(Color.FromArgb(200, 200, 200), 1))
            {
                e.Graphics.DrawRectangle(pen, tabRect);
            }

            // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
            var textRect = new Rectangle(tabRect.X + 5, tabRect.Y + 5, tabRect.Width - 10, tabRect.Height - 10);
            TextRenderer.DrawText(e.Graphics, tabPage.Text, 
                new Font("SF Pro Display", 11F, FontStyle.Regular), 
                textRect, Color.FromArgb(51, 51, 51), 
                TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);
        }


        private void MenuButton_Click(object sender, EventArgs e)
        {
            var button = sender as MacOSButton;
            var tag = button.Tag.ToString();

            switch (tag)
            {
                case "home":
                    ShowHomePage();
                    break;
                case "clients":
                    ShowClientsPage();
                    break;
                case "tickets":
                    ShowTicketsPage();
                    break;
                case "services":
                    ShowServicesPage();
                    break;
                case "zones":
                    ShowZonesPage();
                    break;
                case "employees":
                    ShowEmployeesPage();
                    break;
                case "schedule":
                    ShowSchedulePage();
                    break;
                case "inventory":
                    ShowInventoryPage();
                    break;
                case "rentals":
                    ShowRentalsPage();
                    break;
                case "visits":
                    ShowVisitsPage();
                    break;
                case "payments":
                    ShowPaymentsPage();
                    break;
                case "reports":
                    ShowReportsPage();
                    break;
                case "video":
                    ShowVideoPlayer();
                    break;
                case "map":
                    ShowInteractiveMap();
                    break;
                case "settings":
                    ShowSettingsPage();
                    break;
                case "profile":
                    ShowPlaceholderPage("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                    break;
                case "admin":
                    ShowPlaceholderPage("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏");
                    break;
            }
        }

        private void LoginButton_Click(object sender, EventArgs e)
        {
            ShowPlaceholderPage("üîê –í—Ö–æ–¥", "–§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É");
        }

        private void RegisterButton_Click(object sender, EventArgs e)
        {
            ShowPlaceholderPage("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }

        private void LogoutButton_Click(object sender, EventArgs e)
        {
            ShowPlaceholderPage("üö™ –í—ã—Ö–æ–¥", "–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
        }

        private void UpdateUserInterface()
        {
            _welcomeLabel.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–≤–∞–ø–∞—Ä–∫–æ–º!";
        }

        // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        private void ShowHomePage()
        {
            _contentPanel.Controls.Clear();
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            var scrollPanel = new Panel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                Padding = new Padding(20, 10, 20, 20)
            };

            var welcomeLabel = new Label
            {
                Text = "üåä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–≤–∞–ø–∞—Ä–∫–æ–º!",
                Font = new Font("SF Pro Text", 28F, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 255),
                Location = new Point(20, 10),
                AutoSize = true
            };

            var descLabel = new Label
            {
                Text = "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∞—Å–ø–µ–∫—Ç–∞–º–∏ —Ä–∞–±–æ—Ç—ã –∞–∫–≤–∞–ø–∞—Ä–∫–∞",
                Font = new Font("SF Pro Text", 16F, FontStyle.Regular),
                ForeColor = Color.FromArgb(100, 100, 100),
                Location = new Point(20, 60),
                AutoSize = true
            };

            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            var featuresPanel = new Panel
            {
                Location = new Point(20, 110),
                Size = new Size(800, 350),
                BackColor = Color.FromArgb(248, 248, 248),
                BorderStyle = BorderStyle.FixedSingle
            };

            var featuresLabel = new Label
            {
                Text = "üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:\n\n" +
                       "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–∏—Å–∫\n" +
                       "üé´ –°–∏—Å—Ç–µ–º–∞ –±–∏–ª–µ—Ç–æ–≤ - –ø—Ä–æ–¥–∞–∂–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                       "üõçÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ - –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥, —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n" +
                       "üèä –ó–æ–Ω—ã –∞–∫–≤–∞–ø–∞—Ä–∫–∞ - –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –∫–æ–Ω—Ç—Ä–æ–ª—å\n" +
                       "üë∑ –ü–µ—Ä—Å–æ–Ω–∞–ª - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∑–æ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏\n" +
                       "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å - —É—á–µ—Ç, –∞—Ä–µ–Ω–¥–∞, —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n" +
                       "üö™ –ü–æ—Å–µ—â–µ–Ω–∏—è - –∫–æ–Ω—Ç—Ä–æ–ª—å –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n" +
                       "üí≥ –ü–ª–∞—Ç–µ–∂–∏ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç, –æ—Ç—á–µ—Ç—ã –ø–æ –≤—ã—Ä—É—á–∫–µ\n" +
                       "üìä –û—Ç—á–µ—Ç—ã - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel\n" +
                       "üé¨ –í–∏–¥–µ–æ - –ø—Ä–æ–º–æ-–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∞–∫–≤–∞–ø–∞—Ä–∫–∞\n" +
                       "üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω",
                Font = new Font("SF Pro Text", 11F, FontStyle.Regular),
                ForeColor = Color.FromArgb(80, 80, 80),
                Location = new Point(15, 15),
                Size = new Size(770, 320),
                TextAlign = ContentAlignment.TopLeft
            };

            featuresPanel.Controls.Add(featuresLabel);
            scrollPanel.Controls.AddRange(new Control[] { welcomeLabel, descLabel, featuresPanel });
            _contentPanel.Controls.Add(scrollPanel);
        }

        private async void ShowClientsPage()
        {
            await ShowDataPageAsync("üë• –ö–ª–∏–µ–Ω—Ç—ã", async () =>
            {
                var repo = new ClientRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowTicketsPage()
        {
            await ShowDataPageAsync("üé´ –ë–∏–ª–µ—Ç—ã", async () =>
            {
                var repo = new TicketRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowServicesPage()
        {
            await ShowDataPageAsync("üõçÔ∏è –£—Å–ª—É–≥–∏", async () =>
            {
                var repo = new ServiceRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowZonesPage()
        {
            await ShowDataPageAsync("üèä –ó–æ–Ω—ã", async () =>
            {
                var repo = new ZoneRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowEmployeesPage()
        {
            await ShowDataPageAsync("üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏", async () =>
            {
                var repo = new EmployeeRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowSchedulePage()
        {
            await ShowDataPageAsync("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", async () =>
            {
                var repo = new ScheduleRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowInventoryPage()
        {
            await ShowDataPageAsync("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", async () =>
            {
                var repo = new InventoryRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowRentalsPage()
        {
            await ShowDataPageAsync("üèÉ –ê—Ä–µ–Ω–¥–∞", async () =>
            {
                var repo = new InventoryRentalRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowVisitsPage()
        {
            await ShowDataPageAsync("üö™ –ü–æ—Å–µ—â–µ–Ω–∏—è", async () =>
            {
                var repo = new VisitRepository();
                return await repo.GetAllAsync();
            });
        }

        private async void ShowPaymentsPage()
        {
            await ShowDataPageAsync("üí≥ –û–ø–ª–∞—Ç—ã", async () =>
            {
                var repo = new PaymentRepository();
                return await repo.GetAllAsync();
            });
        }

        private void ShowPlaceholderPage(string title, string description)
        {
            _contentPanel.Controls.Clear();
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            var scrollPanel = new Panel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                Padding = new Padding(20, 10, 20, 20)
            };
            
            var titleLabel = new Label
            {
                Text = title,
                Font = new Font("SF Pro Text", 28F, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 255),
                Location = new Point(20, 10),
                AutoSize = true
            };

            var descLabel = new Label
            {
                Text = description,
                Font = new Font("SF Pro Text", 16F, FontStyle.Regular),
                ForeColor = Color.FromArgb(100, 100, 100),
                Location = new Point(20, 60),
                AutoSize = true
            };

            var statusLabel = new Label
            {
                Text = "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                Font = new Font("SF Pro Text", 14F, FontStyle.Italic),
                ForeColor = Color.FromArgb(150, 150, 150),
                Location = new Point(20, 110),
                AutoSize = true
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            var infoPanel = new Panel
            {
                Location = new Point(20, 160),
                Size = new Size(800, 200),
                BackColor = Color.FromArgb(248, 248, 248),
                BorderStyle = BorderStyle.FixedSingle
            };

            var infoLabel = new Label
            {
                Text = "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª–µ:\n\n" +
                       "‚Ä¢ –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏\n" +
                       "‚Ä¢ –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª CRUD –æ–ø–µ—Ä–∞—Ü–∏–π\n" +
                       "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Excel\n" +
                       "‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤",
                Font = new Font("SF Pro Text", 11F, FontStyle.Regular),
                ForeColor = Color.FromArgb(80, 80, 80),
                Location = new Point(15, 15),
                Size = new Size(770, 170),
                TextAlign = ContentAlignment.TopLeft
            };

            infoPanel.Controls.Add(infoLabel);
            scrollPanel.Controls.AddRange(new Control[] { titleLabel, descLabel, statusLabel, infoPanel });
            _contentPanel.Controls.Add(scrollPanel);
        }

        private void ShowReportsPage()
        {
            _contentPanel.Controls.Clear();
            var reportsForm = new ReportsForm();
            reportsForm.TopLevel = false;
            reportsForm.Dock = DockStyle.Fill;
            _contentPanel.Controls.Add(reportsForm);
            reportsForm.Show();
        }

        private void ShowVideoPlayer()
        {
            var videoForm = new VideoPlayerForm();
            videoForm.ShowDialog();
        }

        private void ShowInteractiveMap()
        {
            _contentPanel.Controls.Clear();
            var mapForm = new InteractiveMapForm();
            mapForm.TopLevel = false;
            mapForm.Dock = DockStyle.Fill;
            _contentPanel.Controls.Add(mapForm);
            mapForm.Show();
        }

        private void ShowSettingsPage()
        {
            _contentPanel.Controls.Clear();
            var settingsLabel = new Label
            {
                Text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã",
                Font = new Font("SF Pro Display", 18F, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 255),
                Location = new Point(50, 50),
                AutoSize = true
            };
            _contentPanel.Controls.Add(settingsLabel);
        }

        private async Task ShowDataPageAsync<T>(string title, Func<Task<IEnumerable<T>>> loadData)
        {
            _contentPanel.Controls.Clear();

            var scrollPanel = new Panel
            {
                Dock = DockStyle.Fill,
                AutoScroll = true,
                Padding = new Padding(20, 10, 20, 20)
            };

            var titleLabel = new Label
            {
                Text = title,
                Font = new Font("SF Pro Text", 24F, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 255),
                Location = new Point(20, 10),
                AutoSize = true
            };

            var grid = new DataGridView
            {
                Location = new Point(20, 60),
                Size = new Size(Math.Max(800, _contentPanel.Width - 80), Math.Max(500, _contentPanel.Height - 140)),
                Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom,
                BackgroundColor = Color.White,
                BorderStyle = BorderStyle.None,
                Font = new Font("SF Pro Display", 11F, FontStyle.Regular),
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells,
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                ReadOnly = true,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                GridColor = Color.FromArgb(230, 230, 230),
                RowHeadersVisible = false
            };

            grid.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(245, 245, 245);
            grid.ColumnHeadersDefaultCellStyle.ForeColor = Color.FromArgb(51, 51, 51);
            grid.ColumnHeadersDefaultCellStyle.Font = new Font("SF Pro Display", 11F, FontStyle.Bold);
            grid.EnableHeadersVisualStyles = false;
            grid.AlternatingRowsDefaultCellStyle.BackColor = Color.FromArgb(248, 248, 248);

            scrollPanel.Controls.Add(titleLabel);
            scrollPanel.Controls.Add(grid);
            _contentPanel.Controls.Add(scrollPanel);

            try
            {
                var data = (await loadData()).ToList();
                var table = ToDataTable(data);
                grid.DataSource = table;
                ConfigureGridAppearance(grid);
                ConfigureGridColumns<T>(grid);
                // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –ø–æ –¥–∞–Ω–Ω—ã–º
                grid.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
                foreach (DataGridViewColumn col in grid.Columns)
                {
                    if (col.Visible)
                    {
                        col.SortMode = DataGridViewColumnSortMode.Automatic;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è '{title}': {ex.Message}", "–û—à–∏–±–∫–∞",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ConfigureGridAppearance(DataGridView grid)
        {
            // –û–±—â–∏–π –≤–∏–¥
            grid.CellBorderStyle = DataGridViewCellBorderStyle.None;
            grid.ColumnHeadersBorderStyle = DataGridViewHeaderBorderStyle.None;
            grid.ColumnHeadersVisible = true;
            grid.EnableHeadersVisualStyles = false;
            grid.RowHeadersVisible = false;
            grid.AutoSizeRowsMode = DataGridViewAutoSizeRowsMode.AllCells;
            grid.AllowUserToResizeRows = false;
            grid.AllowUserToOrderColumns = true;
            grid.MultiSelect = false;

            // –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫ –∏ –æ—Ç—Å—Ç—É–ø—ã
            grid.RowTemplate.Height = 36;
            grid.DefaultCellStyle.Padding = new Padding(6, 6, 6, 6);
            grid.ColumnHeadersDefaultCellStyle.Padding = new Padding(6, 10, 6, 10);

            // –¶–≤–µ—Ç–∞ –≤—ã–±–æ—Ä–∞
            grid.DefaultCellStyle.SelectionBackColor = Color.FromArgb(229, 241, 255);
            grid.DefaultCellStyle.SelectionForeColor = Color.FromArgb(0, 64, 140);

            // –¶–≤–µ—Ç–∞ —à–∞–ø–∫–∏ (–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –±—ã–ª –≤–∏–¥–µ–Ω –≤—Å–µ–≥–¥–∞)
            grid.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(245, 245, 245);
            grid.ColumnHeadersDefaultCellStyle.ForeColor = Color.FromArgb(51, 51, 51);
            grid.ColumnHeadersDefaultCellStyle.SelectionBackColor = Color.FromArgb(245, 245, 245);
            grid.ColumnHeadersDefaultCellStyle.SelectionForeColor = Color.FromArgb(51, 51, 51);
            grid.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleLeft;
            grid.ColumnHeadersDefaultCellStyle.WrapMode = DataGridViewTriState.False;
            grid.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.DisableResizing;
            grid.ColumnHeadersHeight = 40;

            // –°–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å —à–∞–ø–∫–∏ (–∏–º–∏—Ç–∞—Ü–∏—è) –∏ —Ñ–æ–Ω
            grid.BorderStyle = BorderStyle.None;

            // –£–ª—É—á—à–∞–µ–º —Å–∫—Ä–æ–ª–ª (DoubleBuffer —á–µ—Ä–µ–∑ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ)
            typeof(DataGridView)
                .GetProperty("DoubleBuffered", BindingFlags.Instance | BindingFlags.NonPublic)?
                .SetValue(grid, true, null);
        }

        private void ConfigureGridColumns<T>(DataGridView grid)
        {
            var modelType = typeof(T);

            // –°–ª–æ–≤–∞—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
            var headers = GetHeaderMapForType(modelType);

            // –§–æ—Ä–º–∞—Ç—ã –ø–æ —Å–≤–æ–π—Å—Ç–≤–∞–º
            var dateColumns = new HashSet<string>(new[] { "BirthDate", "RegistrationDate", "PurchaseDate", "ValidUntil", "PaymentDate", "WorkDate", "RentalDate", "ReturnDate" });
            var dateTimeColumns = new HashSet<string>(new[] { "EntryTime", "ExitTime" });
            var moneyColumns = new HashSet<string>(new[] { "Price", "Amount", "DepositAmount" });
            var integerColumnsHideZeros = new HashSet<string>(new[] { "ResponsibleEmployeeId" });

            // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            foreach (DataGridViewColumn column in grid.Columns)
            {
                var key = string.IsNullOrEmpty(column.DataPropertyName) ? column.Name : column.DataPropertyName;
                var prop = modelType.GetProperty(key);
                if (prop != null)
                {
                    var propType = prop.PropertyType;
                    if (typeof(System.Collections.IEnumerable).IsAssignableFrom(propType) && propType != typeof(string))
                    {
                        column.Visible = false;
                        continue;
                    }
                    if (!propType.IsValueType && propType != typeof(string))
                    {
                        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (Client, Employee, Zone, ...)
                        column.Visible = false;
                        continue;
                    }
                }

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                if (headers.TryGetValue(key, out var headerText))
                {
                    column.HeaderText = headerText;
                    column.HeaderCell.ToolTipText = headerText;
                }
                else
                {
                    // –£–±–∏—Ä–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ/–≤—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–π –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
                    column.Visible = false;
                    continue;
                }

                // –§–æ—Ä–º–∞—Ç—ã
                if (dateColumns.Contains(key))
                {
                    column.DefaultCellStyle.Format = "dd.MM.yyyy";
                }
                else if (dateTimeColumns.Contains(key))
                {
                    column.DefaultCellStyle.Format = "dd.MM.yyyy HH:mm";
                }
                else if (moneyColumns.Contains(key))
                {
                    column.DefaultCellStyle.Format = "#,0.## ‚ÇΩ";
                    column.DefaultCellStyle.NullValue = "";
                }

                // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
                if (column.ValueType == typeof(int) || column.ValueType == typeof(decimal) || column.ValueType == typeof(double))
                {
                    column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleRight;
                    column.DefaultCellStyle.NullValue = "";

                    // –°–∫—Ä—ã–≤–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–µ—Ö. –ø–æ–ª–µ–π
                    if (integerColumnsHideZeros.Contains(key))
                    {
                        column.DefaultCellStyle.Format = "#";
                    }
                }
            }

            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —à–∏—Ä–∏–Ω—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
            SetPreferredWidth(grid, new[] { "FullName", "Name", "Description", "ZoneName", "EmployeeName", "ClientName", "InventoryName", "ServiceName", "TicketType" }, 180);
            SetPreferredWidth(grid, new[] { "Email", "Phone" }, 140);
            SetPreferredWidth(grid, new[] { "Status", "StatusDisplayName" }, 120);

            grid.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
            grid.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells;
            grid.Refresh();
        }

        private string LocalizeHeader(string header)
        {
            // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—â–∏—Ö –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—Å—Ç—Ä–µ—Ç—è—Ç—Å—è
            return header switch
            {
                "Id" => "ID",
                "Full Name" => "–§–ò–û",
                "Phone" => "–¢–µ–ª–µ—Ñ–æ–Ω",
                "Email" => "Email",
                "Birth Date" => "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
                "Registration Date" => "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                "Position" => "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
                "Hire Date" => "–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞",
                "Ticket Type" => "–¢–∏–ø –±–∏–ª–µ—Ç–∞",
                "Price" => "–¶–µ–Ω–∞",
                "Purchase Date" => "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏",
                "Valid Until" => "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ",
                "Name" => "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "Description" => "–û–ø–∏—Å–∞–Ω–∏–µ",
                "Amount" => "–°—É–º–º–∞",
                "Payment Date" => "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã",
                "Payment Method" => "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
                "Zone Name" => "–ó–æ–Ω–∞",
                "Capacity" => "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "Entry Time" => "–í—Ö–æ–¥",
                "Exit Time" => "–í—ã—Ö–æ–¥",
                "Quantity" => "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                "Status" => "–°—Ç–∞—Ç—É—Å",
                "Employee Name" => "–°–æ—Ç—Ä—É–¥–Ω–∏–∫",
                "Client Name" => "–ö–ª–∏–µ–Ω—Ç",
                "Service Name" => "–£—Å–ª—É–≥–∞",
                "Inventory Name" => "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                "Work Date" => "–î–∞—Ç–∞",
                "Shift Start" => "–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã",
                "Shift End" => "–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã",
                _ => header
            };
        }

        private Dictionary<string, string> GetHeaderMapForType(Type modelType)
        {
            // –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
            var map = new Dictionary<string, string>
            {
                // –û–±—â–∏–µ
                { "ClientId", "ID –∫–ª–∏–µ–Ω—Ç–∞" },
                { "TicketId", "ID –±–∏–ª–µ—Ç–∞" },
                { "ServiceId", "ID —É—Å–ª—É–≥–∏" },
                { "ZoneId", "ID –∑–æ–Ω—ã" },
                { "EmployeeId", "ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" },
                { "PaymentId", "ID –æ–ø–ª–∞—Ç—ã" },
                { "InventoryId", "ID –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è" },
                { "RentalId", "ID –∞—Ä–µ–Ω–¥—ã" },
                { "ScheduleId", "ID —Å–º–µ–Ω—ã" },

                { "FullName", "–§–ò–û" },
                { "Phone", "–¢–µ–ª–µ—Ñ–æ–Ω" },
                { "Email", "Email" },
                { "BirthDate", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è" },
                { "RegistrationDate", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" },
                { "Position", "–î–æ–ª–∂–Ω–æ—Å—Ç—å" },
                { "HireDate", "–î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞" },

                { "TicketType", "–¢–∏–ø –±–∏–ª–µ—Ç–∞" },
                { "Price", "–¶–µ–Ω–∞" },
                { "PurchaseDate", "–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏" },
                { "ValidUntil", "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ" },

                { "Name", "–ù–∞–∑–≤–∞–Ω–∏–µ" },
                { "Description", "–û–ø–∏—Å–∞–Ω–∏–µ" },
                { "Amount", "–°—É–º–º–∞" },
                { "PaymentDate", "–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã" },
                { "PaymentMethod", "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã" },

                { "ZoneName", "–ó–æ–Ω–∞" },
                { "Capacity", "–í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å" },

                { "EntryTime", "–í—Ö–æ–¥" },
                { "ExitTime", "–í—ã—Ö–æ–¥" },

                { "Quantity", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" },
                { "Status", "–°—Ç–∞—Ç—É—Å" },
                { "ResponsibleEmployeeId", "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π (ID)" },

                { "EmployeeName", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" },
                { "ClientName", "–ö–ª–∏–µ–Ω—Ç" },
                { "ServiceName", "–£—Å–ª—É–≥–∞" },
                { "InventoryName", "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å" },

                { "WorkDate", "–î–∞—Ç–∞" },
                { "ShiftStart", "–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã" },
                { "ShiftEnd", "–ö–æ–Ω–µ—Ü —Å–º–µ–Ω—ã" }
            };

            return map;
        }

        private void SetPreferredWidth(DataGridView grid, IEnumerable<string> columnNames, int width)
        {
            foreach (var name in columnNames)
            {
                var col = grid.Columns.Cast<DataGridViewColumn>().FirstOrDefault(c => c.DataPropertyName == name && c.Visible);
                if (col != null)
                {
                    col.Width = width;
                }
            }
        }

        private string SplitPascalCase(string input)
        {
            if (string.IsNullOrEmpty(input)) return input;
            var chars = input.SelectMany((ch, i) => i > 0 && char.IsUpper(ch) && (i + 1 < input.Length ? char.IsLower(input[i + 1]) : true) ? new[] { ' ', ch } : new[] { ch }).ToArray();
            return new string(chars);
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            
            // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            using (var brush = new LinearGradientBrush(
                this.ClientRectangle,
                Color.FromArgb(248, 248, 248),
                Color.FromArgb(235, 235, 235),
                LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(brush, this.ClientRectangle);
            }
        }
    }
}
