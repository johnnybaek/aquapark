using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Linq;
using System.Windows.Forms;
using AquaparkApp.Controls;
using AquaparkApp.DAL;
using AquaparkApp.Models;
using ClosedXML.Excel;
using System.IO;

namespace AquaparkApp.Forms
{
    public partial class ReportsForm : Form
    {
        private Panel _mainPanel;
        private Panel _headerPanel;
        private Panel _contentPanel;
        private ComboBox _reportTypeComboBox;
        private DateTimePicker _startDatePicker;
        private DateTimePicker _endDatePicker;
        private MacOSButton _generateButton;
        private MacOSButton _exportExcelButton;
        private DataGridView _reportDataGrid;
        private Label _reportTitleLabel;
        private Label _summaryLabel;
        private ClientRepository _clientRepository;
        private TicketRepository _ticketRepository;
        private ServiceRepository _serviceRepository;
        private ZoneRepository _zoneRepository;

        public ReportsForm()
        {
            InitializeComponent();
            InitializeRepositories();
            SetupUI();
            LoadReportTypes();
        }


        private void InitializeRepositories()
        {
            _clientRepository = new ClientRepository();
            _ticketRepository = new TicketRepository();
            _serviceRepository = new ServiceRepository();
            _zoneRepository = new ZoneRepository();
        }

        private void SetupUI()
        {
            // –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å
            _mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };

            // –ü–∞–Ω–µ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
            CreateHeaderPanel();

            // –ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            CreateContentPanel();

            _mainPanel.Controls.AddRange(new Control[] { _headerPanel, _contentPanel });
            this.Controls.Add(_mainPanel);
        }

        private void CreateHeaderPanel()
        {
            _headerPanel = new Panel
            {
                Dock = DockStyle.Top,
                Height = 120,
                BackColor = Color.FromArgb(0, 122, 255)
            };

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            var titleLabel = new Label
            {
                Text = "üìä –û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫–≤–∞–ø–∞—Ä–∫–∞",
                Font = new Font("SF Pro Display", 20F, FontStyle.Bold),
                ForeColor = Color.White,
                Location = new Point(30, 20),
                AutoSize = true
            };

            // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            var reportTypeLabel = new Label
            {
                Text = "–¢–∏–ø –æ—Ç—á–µ—Ç–∞:",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.White,
                Location = new Point(30, 60),
                AutoSize = true
            };

            _reportTypeComboBox = new ComboBox
            {
                Size = new Size(200, 30),
                Location = new Point(130, 58),
                Font = new Font("SF Pro Display", 11F, FontStyle.Regular),
                DropDownStyle = ComboBoxStyle.DropDownList
            };

            // –ü–µ—Ä–∏–æ–¥
            var periodLabel = new Label
            {
                Text = "–ü–µ—Ä–∏–æ–¥:",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.White,
                Location = new Point(350, 60),
                AutoSize = true
            };

            _startDatePicker = new DateTimePicker
            {
                Size = new Size(120, 30),
                Location = new Point(420, 58),
                Font = new Font("SF Pro Display", 10F, FontStyle.Regular),
                Format = DateTimePickerFormat.Short
            };

            var toLabel = new Label
            {
                Text = "–¥–æ",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.White,
                Location = new Point(550, 60),
                AutoSize = true
            };

            _endDatePicker = new DateTimePicker
            {
                Size = new Size(120, 30),
                Location = new Point(580, 58),
                Font = new Font("SF Pro Display", 10F, FontStyle.Regular),
                Format = DateTimePickerFormat.Short
            };

            // –ö–Ω–æ–ø–∫–∏
            _generateButton = new MacOSButton
            {
                Text = "üìà –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å",
                Size = new Size(120, 35),
                Location = new Point(720, 55),
                Font = new Font("SF Pro Display", 11F, FontStyle.Regular)
            };
            _generateButton.Click += GenerateButton_Click;

            _exportExcelButton = new MacOSButton
            {
                Text = "üìä Excel",
                Size = new Size(100, 35),
                Location = new Point(850, 55),
                Font = new Font("SF Pro Display", 11F, FontStyle.Regular),
                Enabled = false
            };
            _exportExcelButton.Click += ExportExcelButton_Click;

            _headerPanel.Controls.AddRange(new Control[] 
            {
                titleLabel, reportTypeLabel, _reportTypeComboBox, periodLabel,
                _startDatePicker, toLabel, _endDatePicker, _generateButton, _exportExcelButton
            });
        }

        private void CreateContentPanel()
        {
            _contentPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.FromArgb(248, 248, 248),
                Padding = new Padding(20)
            };

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞
            _reportTitleLabel = new Label
            {
                Text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –∏ –ø–µ—Ä–∏–æ–¥",
                Font = new Font("SF Pro Display", 16F, FontStyle.Bold),
                ForeColor = Color.FromArgb(51, 51, 51),
                Location = new Point(20, 20),
                AutoSize = true
            };

            // –°–≤–æ–¥–∫–∞
            _summaryLabel = new Label
            {
                Text = "",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.FromArgb(102, 102, 102),
                Location = new Point(20, 50),
                Size = new Size(800, 60),
                AutoSize = true
            };

            // –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
            _reportDataGrid = new DataGridView
            {
                Location = new Point(20, 120),
                Size = new Size(1100, 500),
                BackgroundColor = Color.White,
                BorderStyle = BorderStyle.None,
                Font = new Font("SF Pro Display", 11F, FontStyle.Regular),
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill,
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                ReadOnly = true,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                GridColor = Color.FromArgb(230, 230, 230),
                RowHeadersVisible = false
            };

            // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
            _reportDataGrid.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(0, 122, 255);
            _reportDataGrid.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
            _reportDataGrid.ColumnHeadersDefaultCellStyle.Font = new Font("SF Pro Display", 11F, FontStyle.Bold);
            _reportDataGrid.AlternatingRowsDefaultCellStyle.BackColor = Color.FromArgb(248, 248, 248);

            _contentPanel.Controls.AddRange(new Control[] 
            {
                _reportTitleLabel, _summaryLabel, _reportDataGrid
            });
        }

        private void LoadReportTypes()
        {
            var reportTypes = new[]
            {
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                "üë• –ö–ª–∏–µ–Ω—Ç—ã",
                "üé´ –ë–∏–ª–µ—Ç—ã",
                "üõçÔ∏è –£—Å–ª—É–≥–∏",
                "üèä –ó–æ–Ω—ã",
                "üë∑ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏",
                "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                "üèÉ –ê—Ä–µ–Ω–¥–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è",
                "üö™ –ü–æ—Å–µ—â–µ–Ω–∏—è",
                "üí≥ –û–ø–ª–∞—Ç—ã",
                "üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å",
                "üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏",
                "üèÜ –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã"
            };

            _reportTypeComboBox.Items.AddRange(reportTypes);
            _reportTypeComboBox.SelectedIndex = 0;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü)
            _endDatePicker.Value = DateTime.Now;
            _startDatePicker.Value = DateTime.Now.AddMonths(-1);
        }

        private async void GenerateButton_Click(object sender, EventArgs e)
        {
            try
            {
                _generateButton.Enabled = false;
                _generateButton.Text = "‚è≥ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ...";

                var reportType = _reportTypeComboBox.SelectedItem.ToString();
                var startDate = _startDatePicker.Value.Date;
                var endDate = _endDatePicker.Value.Date;

                _reportTitleLabel.Text = reportType;
                _reportDataGrid.DataSource = null;

                switch (reportType)
                {
                    case "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                        await GenerateGeneralStatisticsReport();
                        break;
                    case "üë• –ö–ª–∏–µ–Ω—Ç—ã":
                        await GenerateClientsReport();
                        break;
                    case "üé´ –ë–∏–ª–µ—Ç—ã":
                        await GenerateTicketsReport(startDate, endDate);
                        break;
                    case "üõçÔ∏è –£—Å–ª—É–≥–∏":
                        await GenerateServicesReport(startDate, endDate);
                        break;
                    case "üèä –ó–æ–Ω—ã":
                        await GenerateZonesReport();
                        break;
                    case "üí≥ –û–ø–ª–∞—Ç—ã":
                        await GeneratePaymentsReport(startDate, endDate);
                        break;
                    case "üìà –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å":
                        await GenerateFinancialReport(startDate, endDate);
                        break;
                    case "üìã –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏":
                        await GeneratePopularServicesReport();
                        break;
                    case "üèÜ –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã":
                        await GenerateTopClientsReport();
                        break;
                }

                _exportExcelButton.Enabled = true;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
            finally
            {
                _generateButton.Enabled = true;
                _generateButton.Text = "üìà –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å";
            }
        }

        private async Task GenerateGeneralStatisticsReport()
        {
            var clients = await _clientRepository.GetAllAsync();
            var tickets = await _ticketRepository.GetAllAsync();
            var services = await _serviceRepository.GetAllAsync();
            var zones = await _zoneRepository.GetAllAsync();

            var summary = $"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients.Count()}, –ë–∏–ª–µ—Ç–æ–≤: {tickets.Count()}, " +
                         $"–£—Å–ª—É–≥: {services.Count()}, –ó–æ–Ω: {zones.Count()}";
            _summaryLabel.Text = summary;

            var reportData = new[]
            {
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", –ó–Ω–∞—á–µ–Ω–∏–µ = clients.Count().ToString() },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–ª–µ—Ç–æ–≤", –ó–Ω–∞—á–µ–Ω–∏–µ = tickets.Count().ToString() },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥", –ó–Ω–∞—á–µ–Ω–∏–µ = services.Count().ToString() },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–Ω", –ó–Ω–∞—á–µ–Ω–∏–µ = zones.Count().ToString() },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞ –æ—Ç –±–∏–ª–µ—Ç–æ–≤", –ó–Ω–∞—á–µ–Ω–∏–µ = tickets.Sum(t => t.Price).ToString("C") },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞", –ó–Ω–∞—á–µ–Ω–∏–µ = tickets.Average(t => t.Price).ToString("C") },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏", –ó–Ω–∞—á–µ–Ω–∏–µ = services.Average(s => s.Price).ToString("C") }
            };

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GenerateClientsReport()
        {
            var clients = await _clientRepository.GetAllAsync();
            _summaryLabel.Text = $"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients.Count()}";

            var reportData = clients.Select(c => new
            {
                ID = c.ClientId,
                –§–ò–û = c.FullName,
                –¢–µ–ª–µ—Ñ–æ–Ω = c.Phone,
                Email = c.Email ?? "–ù–µ —É–∫–∞–∑–∞–Ω",
                –î–∞—Ç–∞_—Ä–æ–∂–¥–µ–Ω–∏—è = c.BirthDate.ToString("dd.MM.yyyy"),
                –í–æ–∑—Ä–∞—Å—Ç = c.Age,
                –î–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ = c.RegistrationDate.ToString("dd.MM.yyyy")
            }).ToList();

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GenerateTicketsReport(DateTime startDate, DateTime endDate)
        {
            var tickets = await _ticketRepository.GetAllAsync();
            var filteredTickets = tickets.Where(t => t.PurchaseDate.Date >= startDate && t.PurchaseDate.Date <= endDate);

            _summaryLabel.Text = $"–ë–∏–ª–µ—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥: {filteredTickets.Count()}, " +
                               $"–û–±—â–∞—è —Å—É–º–º–∞: {filteredTickets.Sum(t => t.Price).ToString("C")}";

            var reportData = filteredTickets.Select(t => new
            {
                ID = t.TicketId,
                –ö–ª–∏–µ–Ω—Ç = t.Client?.FullName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                –¢–∏–ø_–±–∏–ª–µ—Ç–∞ = t.TicketType,
                –¶–µ–Ω–∞ = t.Price.ToString("C"),
                –î–∞—Ç–∞_–ø–æ–∫—É–ø–∫–∏ = t.PurchaseDate.ToString("dd.MM.yyyy"),
                –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω_–¥–æ = t.ValidUntil.ToString("dd.MM.yyyy"),
                –°—Ç–∞—Ç—É—Å = t.Status
            }).ToList();

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GenerateServicesReport(DateTime startDate, DateTime endDate)
        {
            var services = await _serviceRepository.GetAllAsync();
            _summaryLabel.Text = $"–í—Å–µ–≥–æ —É—Å–ª—É–≥: {services.Count()}, " +
                               $"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {services.Sum(s => s.Price).ToString("C")}";

            var reportData = services.Select(s => new
            {
                ID = s.ServiceId,
                –ù–∞–∑–≤–∞–Ω–∏–µ = s.Name,
                –û–ø–∏—Å–∞–Ω–∏–µ = s.ShortDescription,
                –¶–µ–Ω–∞ = s.Price.ToString("C")
            }).ToList();

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GenerateZonesReport()
        {
            var zones = await _zoneRepository.GetAllAsync();
            _summaryLabel.Text = $"–í—Å–µ–≥–æ –∑–æ–Ω: {zones.Count()}, " +
                               $"–û–±—â–∞—è –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {zones.Sum(z => z.Capacity)}";

            var reportData = zones.Select(z => new
            {
                ID = z.ZoneId,
                –ù–∞–∑–≤–∞–Ω–∏–µ = z.ZoneName,
                –û–ø–∏—Å–∞–Ω–∏–µ = z.ShortDescription,
                –í–º–µ—Å—Ç–∏–º–æ—Å—Ç—å = z.Capacity
            }).ToList();

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GeneratePaymentsReport(DateTime startDate, DateTime endDate)
        {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–∞—Ö
            _summaryLabel.Text = "–û—Ç—á–µ—Ç –ø–æ –æ–ø–ª–∞—Ç–∞–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥";
            
            var reportData = new[]
            {
                new { –î–∞—Ç–∞ = "01.03.2024", –ö–ª–∏–µ–Ω—Ç = "–ò–≤–∞–Ω–æ–≤ –ê.–°.", –°—É–º–º–∞ = "1500.00", –°–ø–æ—Å–æ–± = "–ö–∞—Ä—Ç–∞", –¢–∏–ø = "–ë–∏–ª–µ—Ç" },
                new { –î–∞—Ç–∞ = "01.03.2024", –ö–ª–∏–µ–Ω—Ç = "–ü–µ—Ç—Ä–æ–≤–∞ –ï.–í.", –°—É–º–º–∞ = "8000.00", –°–ø–æ—Å–æ–± = "–ù–∞–ª–∏—á–Ω—ã–µ", –¢–∏–ø = "–ê–±–æ–Ω–µ–º–µ–Ω—Ç" },
                new { –î–∞—Ç–∞ = "02.03.2024", –ö–ª–∏–µ–Ω—Ç = "–°–∏–¥–æ—Ä–æ–≤ –î.–ù.", –°—É–º–º–∞ = "4000.00", –°–ø–æ—Å–æ–± = "–ö–∞—Ä—Ç–∞", –¢–∏–ø = "–°–µ–º–µ–π–Ω—ã–π –±–∏–ª–µ—Ç" }
            };

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GenerateFinancialReport(DateTime startDate, DateTime endDate)
        {
            var tickets = await _ticketRepository.GetAllAsync();
            var filteredTickets = tickets.Where(t => t.PurchaseDate.Date >= startDate && t.PurchaseDate.Date <= endDate);

            var totalRevenue = filteredTickets.Sum(t => t.Price);
            var avgTicketPrice = filteredTickets.Any() ? filteredTickets.Average(t => t.Price) : 0;

            _summaryLabel.Text = $"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {totalRevenue.ToString("C")}, " +
                               $"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {avgTicketPrice.ToString("C")}";

            var reportData = new[]
            {
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞", –ó–Ω–∞—á–µ–Ω–∏–µ = totalRevenue.ToString("C") },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤", –ó–Ω–∞—á–µ–Ω–∏–µ = filteredTickets.Count().ToString() },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞", –ó–Ω–∞—á–µ–Ω–∏–µ = avgTicketPrice.ToString("C") },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞", –ó–Ω–∞—á–µ–Ω–∏–µ = filteredTickets.Any() ? filteredTickets.Max(t => t.Price).ToString("C") : "0" },
                new { –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å = "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞", –ó–Ω–∞—á–µ–Ω–∏–µ = filteredTickets.Any() ? filteredTickets.Min(t => t.Price).ToString("C") : "0" }
            };

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GeneratePopularServicesReport()
        {
            var services = await _serviceRepository.GetAllAsync();
            _summaryLabel.Text = "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ –∞–∫–≤–∞–ø–∞—Ä–∫–∞";

            var reportData = services.OrderByDescending(s => s.Price).Take(10).Select(s => new
            {
                –ù–∞–∑–≤–∞–Ω–∏–µ = s.Name,
                –¶–µ–Ω–∞ = s.Price.ToString("C"),
                –û–ø–∏—Å–∞–Ω–∏–µ = s.ShortDescription
            }).ToList();

            _reportDataGrid.DataSource = reportData;
        }

        private async Task GenerateTopClientsReport()
        {
            var clients = await _clientRepository.GetTopSpendersAsync(10);
            _summaryLabel.Text = "–¢–æ–ø-10 –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–∞—Ç–∞–º";

            var reportData = clients.Select((c, index) => new
            {
                –ú–µ—Å—Ç–æ = index + 1,
                –ö–ª–∏–µ–Ω—Ç = c.FullName,
                –¢–µ–ª–µ—Ñ–æ–Ω = c.Phone,
                Email = c.Email ?? "–ù–µ —É–∫–∞–∑–∞–Ω",
                –î–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ = c.RegistrationDate.ToString("dd.MM.yyyy")
            }).ToList();

            _reportDataGrid.DataSource = reportData;
        }

        private void ExportExcelButton_Click(object sender, EventArgs e)
        {
            try
            {
                using (var saveDialog = new SaveFileDialog())
                {
                    saveDialog.Filter = "Excel —Ñ–∞–π–ª—ã (*.xlsx)|*.xlsx";
                    saveDialog.FileName = $"–û—Ç—á–µ—Ç_{_reportTypeComboBox.SelectedItem}_{DateTime.Now:yyyyMMdd}.xlsx";

                    if (saveDialog.ShowDialog() == DialogResult.OK)
                    {
                        ExportToExcel(saveDialog.FileName);
                        MessageBox.Show("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Excel!", "–£—Å–ø–µ—Ö", 
                            MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {ex.Message}", "–û—à–∏–±–∫–∞", 
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void ExportToExcel(string fileName)
        {
            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("–û—Ç—á–µ—Ç");

                // –ó–∞–≥–æ–ª–æ–≤–æ–∫
                worksheet.Cell("A1").Value = _reportTitleLabel.Text;
                worksheet.Cell("A1").Style.Font.FontSize = 16;
                worksheet.Cell("A1").Style.Font.Bold = true;
                worksheet.Cell("A1").Style.Fill.BackgroundColor = XLColor.LightBlue;

                // –°–≤–æ–¥–∫–∞
                worksheet.Cell("A2").Value = _summaryLabel.Text;
                worksheet.Cell("A2").Style.Font.FontSize = 12;

                // –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                if (_reportDataGrid.DataSource != null)
                {
                    var data = _reportDataGrid.DataSource as System.Collections.IList;
                    if (data != null && data.Count > 0)
                    {
                        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
                        var properties = data[0].GetType().GetProperties();
                        for (int i = 0; i < properties.Length; i++)
                        {
                            worksheet.Cell(4, i + 1).Value = properties[i].Name;
                            worksheet.Cell(4, i + 1).Style.Font.Bold = true;
                            worksheet.Cell(4, i + 1).Style.Fill.BackgroundColor = XLColor.LightGray;
                        }

                        // –î–∞–Ω–Ω—ã–µ
                        for (int row = 0; row < data.Count; row++)
                        {
                            for (int col = 0; col < properties.Length; col++)
                            {
                                var value = properties[col].GetValue(data[row]);
                                worksheet.Cell(row + 5, col + 1).Value = value?.ToString() ?? "";
                            }
                        }

                        // –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
                        worksheet.Columns().AdjustToContents();
                    }
                }

                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞
                worksheet.Cell($"A{worksheet.RowsUsed().Count() + 3}").Value = $"–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {DateTime.Now:dd.MM.yyyy HH:mm}";
                worksheet.Cell($"A{worksheet.RowsUsed().Count() + 3}").Style.Font.Italic = true;

                workbook.SaveAs(fileName);
            }
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            
            // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            using (var brush = new LinearGradientBrush(
                this.ClientRectangle,
                Color.FromArgb(248, 248, 248),
                Color.FromArgb(235, 235, 235),
                LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(brush, this.ClientRectangle);
            }
        }
    }
}
