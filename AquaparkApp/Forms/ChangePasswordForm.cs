using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using AquaparkApp.Controls;
using AquaparkApp.Models;
using AquaparkApp.BLL;

namespace AquaparkApp.Forms
{
    public partial class ChangePasswordForm : Form
    {
        private User _user;
        private AuthenticationService _authService;
        private MacOSTextBox _currentPasswordTextBox;
        private MacOSTextBox _newPasswordTextBox;
        private MacOSTextBox _confirmPasswordTextBox;
        private MacOSButton _changeButton;
        private MacOSButton _cancelButton;
        private Label _titleLabel;
        private Label _errorLabel;
        private Panel _mainPanel;
        private GlassPanel _glassPanel;

        public ChangePasswordForm(User user, AuthenticationService authService)
        {
            _user = user;
            _authService = authService;
            InitializeComponent();
            SetupUI();
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã
            this.Text = "–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è";
            this.Size = new Size(450, 500);
            this.StartPosition = FormStartPosition.CenterParent;
            this.BackColor = Color.FromArgb(240, 240, 240);
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.Font = new Font("SF Pro Display", 12F, FontStyle.Regular);
            
            this.ResumeLayout(false);
        }

        private void SetupUI()
        {
            // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
            _mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };

            // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–∫–ª—è–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            _glassPanel = new GlassPanel
            {
                Size = new Size(400, 400),
                Location = new Point(25, 50),
                BackColor = Color.FromArgb(200, 255, 255, 255)
            };

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            _titleLabel = new Label
            {
                Text = "üîê –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è",
                Font = new Font("SF Pro Display", 24F, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 255),
                Location = new Point(50, 30),
                Size = new Size(300, 40),
                TextAlign = ContentAlignment.MiddleCenter
            };

            int y = 100;

            // –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
            var currentPasswordLabel = new Label
            {
                Text = "–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.FromArgb(51, 51, 51),
                Location = new Point(50, y),
                Size = new Size(150, 25)
            };

            _currentPasswordTextBox = new MacOSTextBox
            {
                Location = new Point(50, y + 25),
                Size = new Size(300, 40),
                UseSystemPasswordChar = true,
                PlaceholderText = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
            };
            y += 80;

            // –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
            var newPasswordLabel = new Label
            {
                Text = "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.FromArgb(51, 51, 51),
                Location = new Point(50, y),
                Size = new Size(150, 25)
            };

            _newPasswordTextBox = new MacOSTextBox
            {
                Location = new Point(50, y + 25),
                Size = new Size(300, 40),
                UseSystemPasswordChar = true,
                PlaceholderText = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            };
            y += 80;

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            var confirmPasswordLabel = new Label
            {
                Text = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.FromArgb(51, 51, 51),
                Location = new Point(50, y),
                Size = new Size(150, 25)
            };

            _confirmPasswordTextBox = new MacOSTextBox
            {
                Location = new Point(50, y + 25),
                Size = new Size(300, 40),
                UseSystemPasswordChar = true,
                PlaceholderText = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            };
            y += 80;

            // –ö–Ω–æ–ø–∫–∏
            _changeButton = new MacOSButton
            {
                Text = "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å",
                Location = new Point(50, y),
                Size = new Size(150, 45),
                Font = new Font("SF Pro Display", 14F, FontStyle.Bold)
            };
            _changeButton.Click += ChangeButton_Click;

            _cancelButton = new MacOSButton
            {
                Text = "–û—Ç–º–µ–Ω–∞",
                Location = new Point(220, y),
                Size = new Size(130, 45),
                Font = new Font("SF Pro Display", 14F, FontStyle.Regular)
            };
            _cancelButton.Click += CancelButton_Click;

            // –ú–µ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            _errorLabel = new Label
            {
                Text = "",
                Font = new Font("SF Pro Display", 11F, FontStyle.Regular),
                ForeColor = Color.FromArgb(255, 59, 48),
                Location = new Point(50, y + 60),
                Size = new Size(300, 60),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            _glassPanel.Controls.AddRange(new Control[] 
            {
                _titleLabel, currentPasswordLabel, _currentPasswordTextBox,
                newPasswordLabel, _newPasswordTextBox, confirmPasswordLabel, _confirmPasswordTextBox,
                _changeButton, _cancelButton, _errorLabel
            });

            _mainPanel.Controls.Add(_glassPanel);
            this.Controls.Add(_mainPanel);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            _currentPasswordTextBox.KeyPress += TextBox_KeyPress;
            _newPasswordTextBox.KeyPress += TextBox_KeyPress;
            _confirmPasswordTextBox.KeyPress += TextBox_KeyPress;
        }

        private async void ChangeButton_Click(object sender, EventArgs e)
        {
            if (!ValidateInput())
                return;

            try
            {
                _changeButton.Enabled = false;
                _changeButton.Text = "–ò–∑–º–µ–Ω–µ–Ω–∏–µ...";

                var result = await _authService.ChangePasswordAsync(
                    _user.Id, 
                    _currentPasswordTextBox.Text, 
                    _newPasswordTextBox.Text);

                if (result)
                {
                    MessageBox.Show("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", "–£—Å–ø–µ—Ö", 
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.DialogResult = DialogResult.OK;
                    this.Close();
                }
                else
                {
                    ShowError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è");
                }
            }
            catch (Exception ex)
            {
                ShowError($"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {ex.Message}");
            }
            finally
            {
                _changeButton.Enabled = true;
                _changeButton.Text = "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å";
            }
        }

        private void CancelButton_Click(object sender, EventArgs e)
        {
            this.DialogResult = DialogResult.Cancel;
            this.Close();
        }

        private void TextBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (e.KeyChar == (char)Keys.Enter)
            {
                ChangeButton_Click(sender, e);
            }
        }

        private bool ValidateInput()
        {
            if (string.IsNullOrWhiteSpace(_currentPasswordTextBox.Text))
            {
                ShowError("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å");
                return false;
            }

            if (string.IsNullOrWhiteSpace(_newPasswordTextBox.Text) || _newPasswordTextBox.Text.Length < 6)
            {
                ShowError("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤");
                return false;
            }

            if (_newPasswordTextBox.Text != _confirmPasswordTextBox.Text)
            {
                ShowError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
                return false;
            }

            if (_currentPasswordTextBox.Text == _newPasswordTextBox.Text)
            {
                ShowError("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ");
                return false;
            }

            return true;
        }

        private void ShowError(string message)
        {
            _errorLabel.Text = message;
            _errorLabel.Visible = true;
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            
            // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            using (var brush = new LinearGradientBrush(
                this.ClientRectangle,
                Color.FromArgb(240, 240, 240),
                Color.FromArgb(220, 220, 220),
                LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(brush, this.ClientRectangle);
            }

            // –†–∏—Å—É–µ–º —Ç–µ–Ω—å —Ñ–æ—Ä–º—ã
            var shadowRect = new Rectangle(5, 5, this.Width - 10, this.Height - 10);
            using (var shadowBrush = new SolidBrush(Color.FromArgb(50, 0, 0, 0)))
            {
                e.Graphics.FillRectangle(shadowBrush, shadowRect);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);
            if (e.Button == MouseButtons.Left)
            {
                this.Capture = false;
                Message msg = Message.Create(this.Handle, 0xA1, new IntPtr(0x2), IntPtr.Zero);
                this.WndProc(ref msg);
            }
        }
    }
}
