using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using AquaparkApp.Controls;
using AquaparkApp.Models;

namespace AquaparkApp.Forms
{
    public partial class ReportViewerForm : Form
    {
        private string _reportTitle;
        private object _reportData;
        private Panel _mainPanel;
        private GlassPanel _glassPanel;
        private Label _titleLabel;
        private DataGridView _dataGrid;
        private MacOSButton _exportButton;
        private MacOSButton _closeButton;
        private Label _summaryLabel;

        public ReportViewerForm(string reportTitle, object reportData)
        {
            _reportTitle = reportTitle;
            _reportData = reportData;
            InitializeComponent();
            SetupUI();
            LoadReportData();
        }

        private void InitializeComponent()
        {
            this.SuspendLayout();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º—ã
            this.Text = _reportTitle;
            this.Size = new Size(1000, 700);
            this.StartPosition = FormStartPosition.CenterParent;
            this.BackColor = Color.FromArgb(240, 240, 240);
            this.FormBorderStyle = FormBorderStyle.Sizable;
            this.Font = new Font("SF Pro Display", 12F, FontStyle.Regular);
            
            this.ResumeLayout(false);
        }

        private void SetupUI()
        {
            // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
            _mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                BackColor = Color.Transparent
            };

            // –°–æ–∑–¥–∞–µ–º —Å—Ç–µ–∫–ª—è–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
            _glassPanel = new GlassPanel
            {
                Size = new Size(950, 650),
                Location = new Point(25, 25),
                BackColor = Color.FromArgb(200, 255, 255, 255)
            };

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            _titleLabel = new Label
            {
                Text = $"üìä {_reportTitle}",
                Font = new Font("SF Pro Display", 20F, FontStyle.Bold),
                ForeColor = Color.FromArgb(0, 122, 255),
                Location = new Point(50, 20),
                Size = new Size(400, 30),
                TextAlign = ContentAlignment.MiddleCenter
            };

            // –°–≤–æ–¥–∫–∞ –æ—Ç—á–µ—Ç–∞
            _summaryLabel = new Label
            {
                Text = "",
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular),
                ForeColor = Color.FromArgb(51, 51, 51),
                Location = new Point(50, 60),
                Size = new Size(850, 60),
                TextAlign = ContentAlignment.MiddleLeft
            };

            // DataGridView –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            _dataGrid = new DataGridView
            {
                Location = new Point(50, 130),
                Size = new Size(850, 400),
                Font = new Font("SF Pro Display", 10F, FontStyle.Regular),
                BackgroundColor = Color.White,
                BorderStyle = BorderStyle.None,
                GridColor = Color.FromArgb(230, 230, 230),
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                ReadOnly = true,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                MultiSelect = false,
                AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill
            };

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
            _dataGrid.DefaultCellStyle.SelectionBackColor = Color.FromArgb(0, 122, 255);
            _dataGrid.DefaultCellStyle.SelectionForeColor = Color.White;
            _dataGrid.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(248, 248, 248);
            _dataGrid.ColumnHeadersDefaultCellStyle.Font = new Font("SF Pro Display", 11F, FontStyle.Bold);

            // –ö–Ω–æ–ø–∫–∏
            _exportButton = new MacOSButton
            {
                Text = "üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel",
                Location = new Point(50, 550),
                Size = new Size(150, 40),
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular)
            };
            _exportButton.Click += ExportButton_Click;

            _closeButton = new MacOSButton
            {
                Text = "‚ùå –ó–∞–∫—Ä—ã—Ç—å",
                Location = new Point(750, 550),
                Size = new Size(150, 40),
                Font = new Font("SF Pro Display", 12F, FontStyle.Regular)
            };
            _closeButton.Click += CloseButton_Click;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            _glassPanel.Controls.AddRange(new Control[] 
            {
                _titleLabel, _summaryLabel, _dataGrid, _exportButton, _closeButton
            });

            _mainPanel.Controls.Add(_glassPanel);
            this.Controls.Add(_mainPanel);
        }

        private void LoadReportData()
        {
            try
            {
                switch (_reportData)
                {
                    case SalesReport salesReport:
                        LoadSalesReport(salesReport);
                        break;
                    case UserReport userReport:
                        LoadUserReport(userReport);
                        break;
                    case AttendanceReport attendanceReport:
                        LoadAttendanceReport(attendanceReport);
                        break;
                    default:
                        _summaryLabel.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞";
                        break;
                }
            }
            catch (Exception ex)
            {
                _summaryLabel.Text = $"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞: {ex.Message}";
            }
        }

        private void LoadSalesReport(SalesReport report)
        {
            _summaryLabel.Text = $"–ü–µ—Ä–∏–æ–¥: {report.StartDate:dd.MM.yyyy} - {report.EndDate:dd.MM.yyyy}\n" +
                               $"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ‚ÇΩ {report.TotalRevenue:N0} | " +
                               $"–ó–∞–∫–∞–∑–æ–≤: {report.TotalOrders} | " +
                               $"–ë–∏–ª–µ—Ç–æ–≤: {report.TotalTickets} | " +
                               $"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ‚ÇΩ {report.AverageOrderValue:N0}";

            _dataGrid.DataSource = report.DailySales.ToList();
        }

        private void LoadUserReport(UserReport report)
        {
            _summaryLabel.Text = $"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report.TotalUsers} | " +
                               $"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {report.ActiveUsers} | " +
                               $"–ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {report.NewUsersThisMonth} | " +
                               $"–°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã: ‚ÇΩ {report.AverageSpendingPerUser:N0}";

            _dataGrid.DataSource = report.TopSpenders.ToList();
        }

        private void LoadAttendanceReport(AttendanceReport report)
        {
            _summaryLabel.Text = $"–ü–µ—Ä–∏–æ–¥: {report.StartDate:dd.MM.yyyy} - {report.EndDate:dd.MM.yyyy}\n" +
                               $"–í—Å–µ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: {report.TotalVisitors} | " +
                               $"–ü–∏–∫–æ–≤—ã–π –¥–µ–Ω—å: {report.PeakDay:dd.MM.yyyy} ({report.PeakDayVisitors} —á–µ–ª.)";

            _dataGrid.DataSource = report.HourlyStats.ToList();
        }

        private void ExportButton_Click(object sender, EventArgs e)
        {
            var saveDialog = new SaveFileDialog
            {
                Filter = "Excel —Ñ–∞–π–ª—ã (*.xlsx)|*.xlsx",
                Title = "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel"
            };

            if (saveDialog.ShowDialog() == DialogResult.OK)
            {
                try
                {
                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —ç–∫—Å–ø–æ—Ä—Ç–∞
                    MessageBox.Show("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                        MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {ex.Message}", "–û—à–∏–±–∫–∞", 
                        MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void CloseButton_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        protected override void OnPaint(PaintEventArgs e)
        {
            base.OnPaint(e);
            
            // –†–∏—Å—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            using (var brush = new LinearGradientBrush(
                this.ClientRectangle,
                Color.FromArgb(240, 240, 240),
                Color.FromArgb(220, 220, 220),
                LinearGradientMode.Vertical))
            {
                e.Graphics.FillRectangle(brush, this.ClientRectangle);
            }

            // –†–∏—Å—É–µ–º —Ç–µ–Ω—å —Ñ–æ—Ä–º—ã
            var shadowRect = new Rectangle(5, 5, this.Width - 10, this.Height - 10);
            using (var shadowBrush = new SolidBrush(Color.FromArgb(50, 0, 0, 0)))
            {
                e.Graphics.FillRectangle(shadowBrush, shadowRect);
            }
        }

        protected override void OnMouseDown(MouseEventArgs e)
        {
            base.OnMouseDown(e);
            if (e.Button == MouseButtons.Left)
            {
                this.Capture = false;
                Message msg = Message.Create(this.Handle, 0xA1, new IntPtr(0x2), IntPtr.Zero);
                this.WndProc(ref msg);
            }
        }
    }
}
