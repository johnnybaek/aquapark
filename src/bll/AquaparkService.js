import AttractionService from './AttractionService.js';
import TicketService from './TicketService.js';
import VisitorService from './VisitorService.js';

/**
 * –ì–ª–∞–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∞–∫–≤–∞–ø–∞—Ä–∫–∞ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
class AquaparkService {
  constructor() {
    this.attractionService = new AttractionService();
    this.ticketService = new TicketService();
    this.visitorService = new VisitorService();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫–≤–∞–ø–∞—Ä–∫–∞
   */
  async getOverallStats() {
    try {
      const [attractionsStats, ticketsStats, visitorsStats] = await Promise.all([
        this.attractionService.getAttractionsStats(),
        this.ticketService.getTicketsStats(),
        this.visitorService.getVisitorsStats()
      ]);

      return {
        attractions: attractionsStats,
        tickets: ticketsStats,
        visitors: visitorsStats,
        summary: {
          totalAttractions: attractionsStats.total,
          activeAttractions: attractionsStats.active,
          totalVisitorsToday: visitorsStats.today,
          visitorsInPark: visitorsStats.inPark,
          totalRevenue: ticketsStats.totalRevenue,
          averageLoad: attractionsStats.averageLoad
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
   */
  async getDashboardData() {
    try {
      const [attractions, tickets, visitors, stats] = await Promise.all([
        this.attractionService.getAllAttractions(),
        this.ticketService.getAllTickets(),
        this.visitorService.getVisitorsInPark(),
        this.getOverallStats()
      ]);

      return {
        attractions: attractions.slice(0, 6), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6
        tickets: tickets.slice(0, 6),
        visitors: visitors.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 10
        stats
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–Ω–µ–ª–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞–º–∏
   */
  async getAttractionsData() {
    try {
      const [attractions, stats] = await Promise.all([
        this.attractionService.getAllAttractions(),
        this.attractionService.getAttractionsStats()
      ]);

      return {
        attractions,
        stats
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–ª–µ—Ç–∞–º–∏
   */
  async getTicketsData() {
    try {
      const [tickets, stats] = await Promise.all([
        this.ticketService.getAllTickets(),
        this.ticketService.getTicketsStats()
      ]);

      return {
        tickets,
        stats
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–æ–≤');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è–º–∏
   */
  async getVisitorsData() {
    try {
      const [visitors, stats] = await Promise.all([
        this.visitorService.getAllVisitors(),
        this.visitorService.getVisitorsStats()
      ]);

      return {
        visitors,
        stats
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π');
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
   */
  async searchAll(query) {
    try {
      if (!query || query.trim().length === 0) {
        return {
          attractions: [],
          tickets: [],
          visitors: []
        };
      }

      const [attractions, tickets, visitors] = await Promise.all([
        this.attractionService.getAllAttractions().then(attractions => 
          attractions.filter(attraction => 
            attraction.name.toLowerCase().includes(query.toLowerCase()) ||
            attraction.description.toLowerCase().includes(query.toLowerCase())
          )
        ),
        this.ticketService.searchTickets(query),
        this.visitorService.getAllVisitors().then(visitors =>
          visitors.filter(visitor =>
            visitor.name.toLowerCase().includes(query.toLowerCase())
          )
        )
      ]);

      return {
        attractions,
        tickets,
        visitors
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫');
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
   */
  async getRecentActivity() {
    try {
      const [visitors, attractions] = await Promise.all([
        this.visitorService.getTodayVisitors(),
        this.attractionService.getAllAttractions()
      ]);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—Ö–æ–¥–∞
      const recentVisitors = visitors
        .sort((a, b) => new Date(b.entryTime) - new Date(a.entryTime))
        .slice(0, 5);

      // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      const activities = recentVisitors.map(visitor => ({
        type: 'visitor_entry',
        message: `–ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å: ${visitor.name}`,
        time: visitor.entryTime,
        icon: 'üë§'
      }));

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞—Ö
      const maintenanceAttractions = attractions.filter(a => a.status === 'maintenance');
      maintenanceAttractions.forEach(attraction => {
        activities.push({
          type: 'attraction_maintenance',
          message: `–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω "${attraction.name}" –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏`,
          time: attraction.updatedAt,
          icon: 'üîß'
        });
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      return activities.sort((a, b) => new Date(b.time) - new Date(a.time));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON
   */
  async exportData() {
    try {
      const [attractions, tickets, visitors] = await Promise.all([
        this.attractionService.getAllAttractions(),
        this.ticketService.getAllTickets(),
        this.visitorService.getAllVisitors()
      ]);

      const exportData = {
        timestamp: new Date().toISOString(),
        attractions: attractions.map(a => a.toJSON()),
        tickets: tickets.map(t => t.toJSON()),
        visitors: visitors.map(v => v.toJSON())
      };

      return exportData;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ');
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON
   */
  async importData(data) {
    try {
      if (!data || typeof data !== 'object') {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
      if (!data.attractions || !data.tickets || !data.visitors) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –¥–∞–Ω–Ω—ã—Ö');
      }

      // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
      
      return {
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã'
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }
}

export default AquaparkService;
