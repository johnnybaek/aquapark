using System;
using System.Threading.Tasks;
using AquaparkApp.DAL;

namespace AquaparkApp
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("üåä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–≤–∞–ø–∞—Ä–∫–∞");
            Console.WriteLine("=================================================");

            try
            {
                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                var isConnected = await DatabaseConnection.TestConnectionAsync();
                
                if (isConnected)
                {
                    Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!");
                    
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                    await TestRepositories();
                }
                else
                {
                    Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞: {ex.Message}");
            }

            Console.WriteLine("\n–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            Console.ReadKey();
        }

        static async Task TestRepositories()
        {
            Console.WriteLine("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...");

            try
            {
                // –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
                var clientRepo = new ClientRepository();
                var clients = await clientRepo.GetAllAsync();
                Console.WriteLine($"‚úÖ –ö–ª–∏–µ–Ω—Ç—ã: {clients.Count()} –∑–∞–ø–∏—Å–µ–π");

                // –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∑–æ–Ω
                var zoneRepo = new ZoneRepository();
                var zones = await zoneRepo.GetAllAsync();
                Console.WriteLine($"‚úÖ –ó–æ–Ω—ã: {zones.Count()} –∑–∞–ø–∏—Å–µ–π");

                // –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                var employeeRepo = new EmployeeRepository();
                var employees = await employeeRepo.GetAllAsync();
                Console.WriteLine($"‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: {employees.Count()} –∑–∞–ø–∏—Å–µ–π");

                // –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É—Å–ª—É–≥
                var serviceRepo = new ServiceRepository();
                var services = await serviceRepo.GetAllAsync();
                Console.WriteLine($"‚úÖ –£—Å–ª—É–≥–∏: {services.Count()} –∑–∞–ø–∏—Å–µ–π");

                // –¢–µ—Å—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –±–∏–ª–µ—Ç–æ–≤
                var ticketRepo = new TicketRepository();
                var tickets = await ticketRepo.GetAllAsync();
                Console.WriteLine($"‚úÖ –ë–∏–ª–µ—Ç—ã: {tickets.Count()} –∑–∞–ø–∏—Å–µ–π");

                Console.WriteLine("\nüéâ –í—Å–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: {ex.Message}");
            }
        }
    }
}
